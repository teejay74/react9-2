{"version":3,"sources":["components/CreatePost/CreatePost.jsx","components/Main/Main.jsx","hooks/useJsonFetch.js","components/NewPost/NewPost.jsx","components/EditPost/EditPost.jsx","components/SelectedPost/SelectedPost.jsx","App.js","reportWebVitals.js","index.js"],"names":["CreatePost","to","Main","url","options","useState","data","setData","error","setError","loading","setLoading","useEffect","a","fetch","response","status","Error","statusText","ok","json","getData","useJsonFetch","process","onClick","event","localStorage","setItem","target","closest","dataset","message","map","id","data-data","JSON","stringify","src","avatar","alt","name","moment","created","fromNow","content","NewPost","textarea","useRef","uploadPost","method","body","current","value","console","focus","ref","rows","preventDefault","classList","contains","add","EditPost","props","setContent","onChange","SelectedPost","editMode","setEditMode","onToggleEditMode","post","parse","getItem","onDelete","onClose","App","className","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4722b75c.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function CreatePost() {\n  return (\n    <div>\n      <Link to=\"/new\">Создать Пост</Link>\n    </div>\n  )\n}","import React from 'react'\nimport useJsonFetch from '../../hooks/useJsonFetch'\nimport moment from 'moment'\nimport './Main.css'\nimport CreatePost from '../CreatePost/CreatePost'\nimport { Link } from 'react-router-dom'\n\nexport default function Main() {\n  const [loading, error, data] = useJsonFetch(process.env.REACT_APP_URL_POSTS)\n  const onClick = (event) => {\n    localStorage.setItem('selectedPost', event.target.closest('a').dataset.data)\n  }\n\n  return (\n    <div>\n      <CreatePost />\n      asdas\n      {loading}\n      {error && <div>{error.message}</div>}\n      {data && (\n        <ul>\n          {data.map((data) => (\n            <Link\n              to={`/posts/${data.id}`}\n              key={data.id}\n              data-data={JSON.stringify(data)}\n              onClick={onClick}\n            >\n              <li>\n                <img src={data.avatar} alt={data.name} />\n                <div>{data.name}</div>\n                <span>{moment(data.created).fromNow()}</span>\n                <p>{data.content}</p>\n              </li>\n            </Link>\n          ))}\n        </ul>\n      )}\n    </div>\n  )\n}","import { useEffect, useState } from 'react'\n\nexport default function useJsonFetch(url, options) {\n  const [data, setData] = useState('')\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const getData = async () => {\n      setLoading(true)\n      setError('')\n\n      try {\n        const response = await fetch(url, options)\n\n        if (response.status !== 200) {\n          throw new Error(\n            'Network error: ' + response.status + ' - ' + response.statusText\n          )\n        }\n\n        if (response.ok) {\n          const json = await response.json()\n\n          if (!json) {\n            throw new Error('parsing error')\n          }\n          setData(json)\n        }\n      } catch (e) {\n        setError(e)\n        setData('')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    getData()\n  }, [options, url])\n\n  return [loading, error, data]\n}","import React, { useEffect, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport './NewPost.css'\n\nexport default function NewPost() {\n  const textarea = useRef(null)\n\n  const onClick = (event) => {\n    if (!textarea.current.value) {\n      event.preventDefault()\n      if (!textarea.current.classList.contains('empty')) {\n        textarea.current.classList.add('empty')\n        return\n      }\n    }\n\n    uploadPost()\n  }\n\n  const uploadPost = async () => {\n    try {\n      const response = await fetch(process.env.REACT_APP_URL_POSTS, {\n        method: 'POST',\n        'Content-Type': 'application/json',\n        body: JSON.stringify({ id: 0, content: textarea.current.value }),\n      })\n\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  useEffect(() => {\n    textarea.current.focus()\n  }, [])\n\n  return (\n    <div>\n      <Link to=\"/\">\n        X\n      </Link>\n      <textarea ref={textarea} rows=\"10\"></textarea>\n      <Link to=\"/\" onClick={onClick}>\n        Опубликовать\n      </Link>\n    </div>\n  )\n}","import React, { useRef, useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function EditPost(props) {\n  const textarea = useRef(null)\n  const [content, setContent] = useState(props.content)\n  const onWriteContent = (event) => {\n    setContent(event.target.value)\n  }\n\n  const onClick = (event) => {\n    if (!textarea.current.value) {\n      event.preventDefault()\n      if (!textarea.current.classList.contains('empty')) {\n        textarea.current.classList.add('empty')\n        return\n      }\n    }\n    uploadPost()\n  }\n\n  const uploadPost = async () => {\n    try {\n      const response = await fetch(process.env.REACT_APP_URL_POSTS, {\n        method: 'POST',\n        'Content-Type': 'application/json',\n        body: JSON.stringify({ id: props.id, content: content }),\n      })\n\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return (\n    <div>\n      <h3>Редактировать пост</h3>\n      <Link to=\"/\">\n        X\n      </Link>\n      <textarea\n        ref={textarea}\n        rows=\"10\"\n        value={content}\n        onChange={onWriteContent}\n      ></textarea>\n      <Link to=\"/\" onClick={onClick}>\n        Сохранить\n      </Link>\n    </div>\n  )\n}","import moment from 'moment'\nimport React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport EditPost from '../EditPost/EditPost'\n\nexport default function SelectedPost(props) {\n  const [editMode, setEditMode] = useState(false)\n\n  const onToggleEditMode = () => {\n    setEditMode(!editMode)\n  }\n\n  const post = JSON.parse(localStorage.getItem('selectedPost'))\n\n  const onDelete = async (event) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_URL_POSTS}/${event.target.id}`,\n        {\n          method: 'DELETE',\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  if (editMode) {\n    return (\n      <EditPost\n        {...props}\n        id={post.id}\n        content={post.content}\n        onClose={onToggleEditMode}\n      />\n    )\n  }\n\n  return (\n    <li>\n      <img src={post.avatar} alt={post.name} />\n      <div>{post.name}</div>\n      <span>{moment(post.created).fromNow()}</span>\n      <p>{post.content}</p>\n      <div>\n        <button onClick={onToggleEditMode}>Редактировать</button>\n        <Link to=\"/\" id={post.id} onClick={onDelete}>\n          Удалить\n        </Link>\n      </div>\n    </li>\n  )\n}","import './App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Main from './components/Main/Main'\nimport NewPost from './components/NewPost/NewPost'\nimport SelectedPost from './components/SelectedPost/SelectedPost'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/new\" component={NewPost} />\n          <Route path=\"/posts/:id\" component={SelectedPost} />\n          <Route path=\"*\" exact component={Main} />         \n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}